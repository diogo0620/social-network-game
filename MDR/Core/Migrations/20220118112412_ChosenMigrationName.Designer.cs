// <auto-generated />
using System;
using MDR.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MDR.Migrations
{
    [DbContext(typeof(MDRDbContext))]
    [Migration("20220118112412_ChosenMigrationName")]
    partial class ChosenMigrationName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("MDR.Domain.Ligacoes.Ligacao", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UtilizadorA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilizadorB")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ligacoes");
                });

            modelBuilder.Entity("MDR.Domain.PedidosIntroducao.PedidoIntroducao", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeUtilizador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("ParaUtilizador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilizadorObjetivo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PedidosIntroducao");
                });

            modelBuilder.Entity("MDR.Domain.PedidosLigacao.PedidoLigacao", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeUtilizador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("ParaUtilizador")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PedidosLigacao");
                });

            modelBuilder.Entity("MDR.Domain.Utilizadores.Utilizador", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Utilizadores");
                });

            modelBuilder.Entity("MDR.Domain.Ligacoes.Ligacao", b =>
                {
                    b.OwnsOne("MDR.Domain.Ligacoes.ForcaLigacao", "ForcaLigacao", b1 =>
                        {
                            b1.Property<string>("LigacaoId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("valor")
                                .HasColumnType("int");

                            b1.HasKey("LigacaoId");

                            b1.ToTable("Ligacoes");

                            b1.WithOwner()
                                .HasForeignKey("LigacaoId");
                        });

                    b.OwnsOne("MDR.Domain.Ligacoes.ForcaRelacao", "ForcaRelacao", b1 =>
                        {
                            b1.Property<string>("LigacaoId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("dislikes")
                                .HasColumnType("int");

                            b1.Property<int>("likes")
                                .HasColumnType("int");

                            b1.HasKey("LigacaoId");

                            b1.ToTable("Ligacoes");

                            b1.WithOwner()
                                .HasForeignKey("LigacaoId");
                        });

                    b.OwnsMany("MDR.Domain.Utilizadores.Tag", "Tags", b1 =>
                        {
                            b1.Property<string>("LigacaoId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LigacaoId", "Id");

                            b1.ToTable("Ligacoes_Tags");

                            b1.WithOwner()
                                .HasForeignKey("LigacaoId");
                        });

                    b.Navigation("ForcaLigacao");

                    b.Navigation("ForcaRelacao");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MDR.Domain.PedidosIntroducao.PedidoIntroducao", b =>
                {
                    b.OwnsOne("MDR.Domain.Ligacoes.ForcaLigacao", "ForcaLigacao", b1 =>
                        {
                            b1.Property<string>("PedidoIntroducaoId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("valor")
                                .HasColumnType("int");

                            b1.HasKey("PedidoIntroducaoId");

                            b1.ToTable("PedidosIntroducao");

                            b1.WithOwner()
                                .HasForeignKey("PedidoIntroducaoId");
                        });

                    b.OwnsOne("MDR.Domain.PedidosIntroducao.MensagemIntroducao", "MensagemIntroducao", b1 =>
                        {
                            b1.Property<string>("PedidoIntroducaoId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PedidoIntroducaoId");

                            b1.ToTable("PedidosIntroducao");

                            b1.WithOwner()
                                .HasForeignKey("PedidoIntroducaoId");
                        });

                    b.OwnsOne("MDR.Domain.PedidosLigacao.MensagemLigacao", "MensagemLigacao", b1 =>
                        {
                            b1.Property<string>("PedidoIntroducaoId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PedidoIntroducaoId");

                            b1.ToTable("PedidosIntroducao");

                            b1.WithOwner()
                                .HasForeignKey("PedidoIntroducaoId");
                        });

                    b.OwnsMany("MDR.Domain.Utilizadores.Tag", "Tags", b1 =>
                        {
                            b1.Property<string>("PedidoIntroducaoId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PedidoIntroducaoId", "Id");

                            b1.ToTable("PedidosIntroducao_Tags");

                            b1.WithOwner()
                                .HasForeignKey("PedidoIntroducaoId");
                        });

                    b.Navigation("ForcaLigacao");

                    b.Navigation("MensagemIntroducao");

                    b.Navigation("MensagemLigacao");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MDR.Domain.PedidosLigacao.PedidoLigacao", b =>
                {
                    b.OwnsOne("MDR.Domain.Ligacoes.ForcaLigacao", "ForcaLigacao", b1 =>
                        {
                            b1.Property<string>("PedidoLigacaoId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("valor")
                                .HasColumnType("int");

                            b1.HasKey("PedidoLigacaoId");

                            b1.ToTable("PedidosLigacao");

                            b1.WithOwner()
                                .HasForeignKey("PedidoLigacaoId");
                        });

                    b.OwnsOne("MDR.Domain.PedidosLigacao.MensagemLigacao", "MensagemLigacao", b1 =>
                        {
                            b1.Property<string>("PedidoLigacaoId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PedidoLigacaoId");

                            b1.ToTable("PedidosLigacao");

                            b1.WithOwner()
                                .HasForeignKey("PedidoLigacaoId");
                        });

                    b.OwnsMany("MDR.Domain.Utilizadores.Tag", "Tags", b1 =>
                        {
                            b1.Property<string>("PedidoLigacaoId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PedidoLigacaoId", "Id");

                            b1.ToTable("PedidosLigacao_Tags");

                            b1.WithOwner()
                                .HasForeignKey("PedidoLigacaoId");
                        });

                    b.Navigation("ForcaLigacao");

                    b.Navigation("MensagemLigacao");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MDR.Domain.Utilizadores.Utilizador", b =>
                {
                    b.OwnsOne("MDR.Domain.Utilizadores.Avatar", "Avatar", b1 =>
                        {
                            b1.Property<string>("UtilizadorId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UtilizadorId");

                            b1.ToTable("Utilizadores");

                            b1.WithOwner()
                                .HasForeignKey("UtilizadorId");
                        });

                    b.OwnsOne("MDR.Domain.Utilizadores.DataNascimento", "DataNascimento", b1 =>
                        {
                            b1.Property<string>("UtilizadorId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime>("value")
                                .HasColumnType("datetime2");

                            b1.HasKey("UtilizadorId");

                            b1.ToTable("Utilizadores");

                            b1.WithOwner()
                                .HasForeignKey("UtilizadorId");
                        });

                    b.OwnsOne("MDR.Domain.Utilizadores.Descricao", "Descricao", b1 =>
                        {
                            b1.Property<string>("UtilizadorId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UtilizadorId");

                            b1.ToTable("Utilizadores");

                            b1.WithOwner()
                                .HasForeignKey("UtilizadorId");
                        });

                    b.OwnsOne("MDR.Domain.Utilizadores.Email", "Email", b1 =>
                        {
                            b1.Property<string>("UtilizadorId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UtilizadorId");

                            b1.ToTable("Utilizadores");

                            b1.WithOwner()
                                .HasForeignKey("UtilizadorId");
                        });

                    b.OwnsOne("MDR.Domain.Utilizadores.EstadoEmocional", "EstadoEmocional", b1 =>
                        {
                            b1.Property<string>("UtilizadorId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime>("desde")
                                .HasColumnType("datetime2");

                            b1.Property<int>("emocao")
                                .HasColumnType("int");

                            b1.HasKey("UtilizadorId");

                            b1.ToTable("Utilizadores");

                            b1.WithOwner()
                                .HasForeignKey("UtilizadorId");
                        });

                    b.OwnsOne("MDR.Domain.Utilizadores.Localizacao", "Localizacao", b1 =>
                        {
                            b1.Property<string>("UtilizadorId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("cidade")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("pais")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UtilizadorId");

                            b1.ToTable("Utilizadores");

                            b1.WithOwner()
                                .HasForeignKey("UtilizadorId");
                        });

                    b.OwnsOne("MDR.Domain.Utilizadores.Nome", "Nome", b1 =>
                        {
                            b1.Property<string>("UtilizadorId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UtilizadorId");

                            b1.ToTable("Utilizadores");

                            b1.WithOwner()
                                .HasForeignKey("UtilizadorId");
                        });

                    b.OwnsOne("MDR.Domain.Utilizadores.Password", "Password", b1 =>
                        {
                            b1.Property<string>("UtilizadorId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UtilizadorId");

                            b1.ToTable("Utilizadores");

                            b1.WithOwner()
                                .HasForeignKey("UtilizadorId");
                        });

                    b.OwnsOne("MDR.Domain.Utilizadores.PerfilFacebook", "PerfilFacebook", b1 =>
                        {
                            b1.Property<string>("UtilizadorId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("url")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UtilizadorId");

                            b1.ToTable("Utilizadores");

                            b1.WithOwner()
                                .HasForeignKey("UtilizadorId");
                        });

                    b.OwnsOne("MDR.Domain.Utilizadores.PerfilLinkedIn", "PerfilLinkedIn", b1 =>
                        {
                            b1.Property<string>("UtilizadorId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("url")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UtilizadorId");

                            b1.ToTable("Utilizadores");

                            b1.WithOwner()
                                .HasForeignKey("UtilizadorId");
                        });

                    b.OwnsMany("MDR.Domain.Utilizadores.Tag", "Tags", b1 =>
                        {
                            b1.Property<string>("UtilizadorId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UtilizadorId", "Id");

                            b1.ToTable("Utilizadores_Tags");

                            b1.WithOwner()
                                .HasForeignKey("UtilizadorId");
                        });

                    b.OwnsOne("MDR.Domain.Utilizadores.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<string>("UtilizadorId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("codigoPais")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("numero")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UtilizadorId");

                            b1.ToTable("Utilizadores");

                            b1.WithOwner()
                                .HasForeignKey("UtilizadorId");
                        });

                    b.Navigation("Avatar");

                    b.Navigation("DataNascimento");

                    b.Navigation("Descricao");

                    b.Navigation("Email");

                    b.Navigation("EstadoEmocional");

                    b.Navigation("Localizacao");

                    b.Navigation("Nome");

                    b.Navigation("Password");

                    b.Navigation("PerfilFacebook");

                    b.Navigation("PerfilLinkedIn");

                    b.Navigation("Tags");

                    b.Navigation("Telefone");
                });
#pragma warning restore 612, 618
        }
    }
}
